// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

enum MealType {
  breakfast
  lunch
  dinner
  snack
}

enum GoalType {
  lose_weight
  gain_weight
  maintain_weight
}

enum ActivityLevel {
  sedentary
  lightly_active
  moderately_active
  very_active
  extra_active
}

model User {
  id                String         @id @default(uuid()) @map("_id")
  email             String         @unique
  emailVerified     DateTime?
  name              String?
  image             String?
  weight            Int?
  size              Int?
  hashedPassword    String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  age               Int?
  gender            Gender?
  goalType          GoalType?
  activityLevel     ActivityLevel?
  targetWeight      Int?
  dailyCalories     Int?
  dailyProtein      Int?
  dailyFat          Int?
  dailyCarbs        Int?
  percentageProtein Int            @default(40) // Pourcentage de proteine dans l'alimentation
  percentageFat     Int            @default(40) // Pourcentage de lipide dans l'alimentation
  percentageCarbs   Int            @default(20) // Pourcentage de glucide dans l'alimentation

  userFavori UserFavori[] // Contient les aliments favoris d'un utilisateur
  accounts   Account[] // Connection GitHub ou Google
  food       Food[] // Lien de creation d'aliment
  meal       Meal[] // Lien de creation de repas
}

model Account {
  id                String  @id @default(uuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Food {
  id           String       @id @default(uuid()) @map("_id")
  name         String
  barcode      String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
  calories     Int
  protein      Int
  fat          Int
  carbs        Int
  fiber        Int?
  salt         Int?
  servingSize  Int          @default(100) // En g or ml par defaut 100
  vitamins     String?
  minerals     String?
  allergens    String?
  foodCategory String?
  approved     Boolean      @default(false)
  userFavori   UserFavori[]
  meal         Meal[]
}

model UserFavori {
  id      String @id @default(uuid()) @map("_id")
  user_id String
  food_id String
  user    User   @relation(fields: [user_id], references: [id])
  food    Food   @relation(fields: [food_id], references: [id])

  @@unique([user_id, food_id])
}

// Meal is a table that contains the meals of the day. It is linked to the User table by the user_id field. It is also linked to the MealFood table by the id field.
model Meal {
  id        String   @id @default(uuid()) @map("_id")
  user_id   String
  meal_type MealType
  user      User     @relation(fields: [user_id], references: [id])
  food      Food     @relation(fields: [food_id], references: [id])
  food_id   String
  createdAt DateTime @default(now())
}
